var xmlhttp = new XMLHttpRequest();
let url = "music/",
  regex = /[/][%20A-Za-z 1-9)()'.,_-]+\.mp3/g,
  songs,
  listSong = [],
  currentSong;
const audio = document.getElementById("audio"),
  background = document.getElementById("back"),
  songs_container = document.getElementById("songs-container"),
  player_song = document.getElementById("player-song"),
  player_artist = document.getElementById("player-artist"),
  player = document.getElementById("player"),
  button_player_artist = document.getElementById("action-player-btn");
class Song {
  constructor(title, artist, url) {
    (this.title = title), (this.artist = artist), (this.url = url);
  }
}
function eje(index) {
  const songsDivs = document.getElementsByClassName("music-container"),
    buttonsDivs = document.getElementsByClassName("action-btn");
  if (index != currentSong)
    (audio.src = listSong[index].url),
      audio.play().catch((_) => {}),
      songsDivs[currentSong].classList.remove("current"),
      (buttonsDivs[currentSong].src = "img/play_button.png"),
      songsDivs[index].classList.add("current"),
      (buttonsDivs[index].src = "img/pause_button.png"),
      (currentSong = index),
      player.classList.add("current"),
      (button_player_artist.src = "img/pause_button.png");
  else {
    const isPlaying = songsDivs[currentSong].classList.contains("current");
    isPlaying
      ? (audio.pause(),
        songsDivs[currentSong].classList.remove("current"),
        (buttonsDivs[currentSong].src = "img/play_button.png"),
        player.classList.remove("current"),
        (button_player_artist.src = "img/play_button.png"))
      : (audio.play().catch((_) => {}),
        songsDivs[currentSong].classList.add("current"),
        (buttonsDivs[currentSong].src = "img/pause_button.png"),
        player.classList.add("current"),
        (button_player_artist.src = "img/pause_button.png"));
  }
  updateMetadata(listSong[index]);
}
function nextSong() {
  let index = currentSong + 1;
  index > listSong.length - 1 && (index = 0), eje(index);
}
function updateMetadata(song) {
  (player_song.innerHTML = `<p>${song.title} <br><br> ${song.artist}</p>`),
    "mediaSession" in navigator &&
      (navigator.mediaSession.metadata = new MediaMetadata({
        title: song.title,
        artist: song.artist,
        album: `${song.title} - ${song.artist}`,
      }));
}
function getDocHeight() {
  var D = document;
  return Math.max(
    D.body.scrollHeight,
    D.documentElement.scrollHeight,
    D.body.offsetHeight,
    D.documentElement.offsetHeight,
    D.body.clientHeight,
    D.documentElement.clientHeight
  );
}
function amountscrolled() {
  var winheight =
      window.innerHeight ||
      (document.documentElement || document.body).clientHeight,
    docheight = getDocHeight(),
    scrollTop =
      window.pageYOffset ||
      (document.documentElement || document.body.parentNode || document.body)
        .scrollTop,
    trackLength = docheight - winheight,
    pctScrolled = Math.floor((scrollTop / trackLength) * 100),
    treeImgs = document.getElementsByClassName("tree");
  for (let i = 0; i < treeImgs.length; i++) {
    const element = treeImgs[i];
    element.style.filter = ` sepia(${
      0.95 * pctScrolled
    }%) contrast(100%) saturate(${10 + 7 * pctScrolled}%) hue-rotate(0deg)`;
  }
}
(xmlhttp.onreadystatechange = function () {
  if (xmlhttp.readyState == XMLHttpRequest.DONE && 200 == xmlhttp.status) {
    songs = xmlhttp.responseText.match(regex) || [];
    for (
      var random = Math.floor(Math.random() * songs.length), i = 0;
      i < Math.round(songs.length / 2);
      i++
    ) {
      let section = document.createElement("div"),
        img_section = document.createElement("img");
      switch (((section.className = "back_img"), i)) {
        case 0:
          img_section.src = "img/top.png";
          break;
        case Math.round(songs.length / 2) - 1:
          let img_grass = document.createElement("img");
          (img_grass.src = "img/grass.png"),
            (img_grass.id = "grass"),
            section.appendChild(img_grass);
          let arrow = document.createElement("div");
          arrow.classList.add("arrow"),
            section.appendChild(arrow),
            (section.id = "grass_section"),
            (img_section.src = "img/bottom.webp");
          break;
        default:
          img_section.src = "img/middle.png";
      }
      img_section.classList.add("tree"),
        section.appendChild(img_section),
        background.appendChild(section);
    }
    for (var i = 0; i < songs.length; i++) {
      let urlSong = "music" + songs[i],
        par = document.createElement("div"),
        inner = document.createElement("div");
      (inner.className = "navigation"), (par.className = "music-container");
      var withoutSpaces,
        withoutMp3,
        withoutFolder,
        splitted = decodeURI(urlSong)
          .replace(".mp3", "")
          .replace("music/", "")
          .split("-", 2),
        song = splitted[0],
        artist = splitted[1];
      null != song && (song = song.trim()),
        null != artist && (artist = artist.trim());
      var eachSong = new Song(song, artist, urlSong);
      i == random
        ? ((currentSong = i),
          (audio.src = urlSong),
          (inner.innerHTML = `<img class="action-btn" onclick="eje(${i});" width="80" src="img/play_button.png" alt="" />`),
          updateMetadata(eachSong))
        : (inner.innerHTML = `<img class="action-btn" onclick="eje(${i});" width="80" src="img/play_button.png" alt="" />`),
        listSong.push(eachSong);
      var songText =
        song.length > 10 ? `<p>${song}</p>` : `${song}`;
      (inner.innerHTML += `<div class="cont_song"><h4>${songText}</h4><h5>${artist}</h5></div>`),
        par.appendChild(inner),
        songs_container.appendChild(par);
    }
  }
}),
  xmlhttp.open("GET", url, !0),
  xmlhttp.send(),
  navigator.mediaSession.setActionHandler("play", function () {
    eje(currentSong);
  }),
  navigator.mediaSession.setActionHandler("pause", function () {
    eje(currentSong);
  }),
  navigator.mediaSession.setActionHandler("nexttrack", function () {
    nextSong();
  }),
  audio.addEventListener("ended", nextSong),
  window.addEventListener(
    "scroll",
    function () {
      amountscrolled();
    },
    !1
  ),
  window.addEventListener("load", function (event) {
    setTimeout(() => {
      window.scrollTo(0, document.body.scrollHeight);
    }, 2e3),
      setTimeout(() => {
        document.getElementById("overlay").classList.add("anim");
      }, 2500),
      setTimeout(() => {
        (document.getElementById("overlay").style.opacity = "0"),
          (document.getElementById("overlay").style.display = "none");
      }, 4200);
  });
var back = document.getElementById("back"),
  parallaxInstance = new Parallax(back, { pointerEvents: !0 });
